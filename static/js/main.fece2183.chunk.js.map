{"version":3,"sources":["../../src/messageProvider.js","../../src/useMessageNotification.js","../../src/messageNotification.js","Buttons.js","App.js","index.js"],"names":["MessageContext","createContext","message","addMessage","removeMessage","MessageProvider","children","useState","setMessage","contextValue","useCallback","title","text","type","duration","value","useMessageNotification","useContext","MessageNotification","handleClose","Message","onClose","severity","open","autoHideDuration","anchorOrigin","vertical","horizontal","Buttons","showMessage","toUpperCase","onClick","App","ReactDOM","render","document","getElementById"],"mappings":"kQAEaA,EAAiBC,wBAAc,CAC1CC,QAD0C,KAE1CC,WAF0C,KAG1CC,cAAe,OAGXC,EAAkB,SAAC,GAAiB,IAAfC,EAAe,EAAfA,SAAe,EACVC,mBADU,MACjCL,EADiC,KACxBM,EADwB,KAWlCC,EAAe,CACnBP,QADmB,EAEnBC,WAAYO,uBACV,yBAPe,SAACC,EAAOC,EAAMC,EAAMC,GACrCN,EAAW,CAAEG,MAAF,EAASC,KAAT,EAAeC,KAAf,EAAqBC,aAMGX,CAAWQ,EAAOC,EAAMC,EAAzD,KAHiB,IAMnBT,cAAeM,uBAAY,WAb3BF,UAa0B,KAG5B,OACE,kBAACR,EAAD,UAAyBe,MAAON,GADlC,ICzBIO,EAAyB,WAAM,MACYC,qBADZ,GAEnC,MAAO,CAAEf,QAF0B,UAEjBC,WAFiB,aAELC,cAFK,kBCE/Bc,EAAsB,WAAM,MACGF,IAA3Bd,EADwB,UACfE,EADe,kBAEQF,GAAW,CACjDS,MADiD,GAEjDC,KAFiD,GAGjDC,KAHiD,OAIjDC,SAAU,KAJJH,EAFwB,QAEjBC,EAFiB,OAEXC,EAFW,OAELC,EAFK,WAS1BK,EAAc,WAClBf,KAQIgB,EAAU,WACd,SAII,uBAAOC,QAAP,EAA6BC,SAAUT,GACrC,2BADF,GADF,GAFO,wBAAP,OAWJ,OACE,uBACEU,OADF,EAEEC,iBAFF,EAGEH,QAHF,EAIEI,aAvBqB,CACvBC,SADuB,MAEvBC,WAAY,WAuBV,oBAPJ,QCAaC,MAjCC,KAAO,MACbzB,EAAea,IAAfb,WAEF0B,EAAehB,IACnB,MAAMF,EAAK,UAAME,EAAKiB,cAAX,YACLlB,EAAI,aAASC,EAAT,YAEVV,EAAWQ,EAAOC,EAAMC,EADP,MAiBnB,OACE,6BACE,4BAAQkB,QAfY,KACtBF,EAAY,UAcV,qBACA,4BAAQE,QAbe,KACzBF,EAAY,aAYV,wBACA,4BAAQE,QAXe,KACzBF,EAAY,aAUV,wBACA,4BAAQE,QATa,KACvBF,EAAY,WAQV,wBChBSG,MAXH,IAER,kBAAC,EAAD,KACE,6BACE,kBAAC,EAAD,OAEF,kBAAC,EAAD,OCNNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.fece2183.chunk.js","sourcesContent":["import React, { createContext, useState, useCallback } from 'react';\n\nexport const MessageContext = createContext({\n  message: null,\n  addMessage: null,\n  removeMessage: null\n});\n\nconst MessageProvider = ({ children }) => {\n  const [message, setMessage] = useState(null);\n\n  const removeMessage = () => {\n    setMessage(null);\n  };\n\n  const addMessage = (title, text, type, duration) => {\n    setMessage({ title, text, type, duration });\n  };\n\n  const contextValue = {\n    message,\n    addMessage: useCallback(\n      (title, text, type, duration) => addMessage(title, text, type, duration),\n      []\n    ),\n    removeMessage: useCallback(() => removeMessage(), [])\n  };\n\n  return (\n    <MessageContext.Provider value={contextValue}>\n      {children}\n    </MessageContext.Provider>\n  );\n};\n\nexport default MessageProvider;\n","import { useContext } from 'react';\nimport { MessageContext } from './messageProvider';\n\nconst useMessageNotification = () => {\n  const { message, addMessage, removeMessage } = useContext(MessageContext);\n  return { message, addMessage, removeMessage };\n};\n\nexport default useMessageNotification;\n","import React from 'react';\nimport { Snackbar } from '@material-ui/core';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport useMessageNotification from './useMessageNotification';\n\nconst MessageNotification = () => {\n  const { message, removeMessage } = useMessageNotification();\n  const { title, text, type, duration } = message || {\n    title: '',\n    text: '',\n    type: 'info',\n    duration: 6000\n  };\n\n  const handleClose = () => {\n    removeMessage();\n  };\n\n  const snackbarPosition = {\n    vertical: 'top',\n    horizontal: 'center'\n  };\n\n  const Message = () => {\n    if (!message) {\n      return <div />;\n    } else {\n      return (\n        <Alert onClose={handleClose} severity={type}>\n          <AlertTitle>{title}</AlertTitle>\n          {text}\n        </Alert>\n      );\n    }\n  };\n\n  return (\n    <Snackbar\n      open={!!message}\n      autoHideDuration={duration}\n      onClose={handleClose}\n      anchorOrigin={snackbarPosition}\n    >\n      <Message />\n    </Snackbar>\n  );\n};\n\nexport default MessageNotification;\n","import React from 'react';\nimport { useMessageNotification } from '@dhouse.in/message-notification-mui'\n\nconst Buttons = () => {\n  const { addMessage } = useMessageNotification();\n\n  const showMessage = (type) => {\n    const title = `${type.toUpperCase()} Message`;\n    const text = `My ${type} message`;\n    const duration = 3000;\n    addMessage(title, text, type, duration);\n  }\n\n  const showInfoMessage = () => {\n    showMessage('info');\n  };\n  const showWarningMessage = () => {\n    showMessage('warning');\n  };\n  const showSuccessMessage = () => {\n    showMessage('success');\n  };\n  const showErrorMessage = () => {\n    showMessage('error');\n  };\n\n  return (\n    <div>\n      <button onClick={showInfoMessage}>Show Info Message</button>\n      <button onClick={showWarningMessage}>Show Warning Message</button>\n      <button onClick={showSuccessMessage}>Show Success Message</button>\n      <button onClick={showErrorMessage}>Show Error Message</button>\n    </div>\n  );\n}\n\nexport default Buttons\n","import React from 'react'\nimport { MessageNotification, MessageProvider } from '@dhouse.in/message-notification-mui'\nimport Buttons from './Buttons';\n\nconst App = () => {\n  return (\n    <MessageProvider>\n      <div>\n        <Buttons />\n      </div>\n      <MessageNotification />\n    </MessageProvider>\n  );\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}